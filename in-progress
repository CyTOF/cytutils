cell_assignments.csv
from singlets:
- basophil
- cd14_cd16_monocyte
- cd14_monocyte
- cd141_dc
- cd16_monocyte
- cd16hi_nk_cell
- cd1c_dc
- cd4_cd8_t_cell
- cd4_t_cell
- cd4neg_cd8neg_t_cell
- cd56hi_nk_cell
- cd8_t_cell
- eosinophil
- gd_t_cell
- memory_b_cell
- naive_b_cell
- neutrophil
- nkt_cell
- pdc
- plasmablast
- transitional_b_cell

from flowgate:
- b_cell
- basophil
- granulocute
- mdc
- monocyte
- nk_cell
- pdc
- t_cell

from manual labeling csv:
- basophil
- b_cell
- cd4_cd8_t_cell
- cd4neg_cd8neg_t_cell
- cd4_t_cell
- cd8_t_cell
- memory_b_cell
- naive_b_cell
- plasmablast
- t_cell
- transitional_b_cell
- treg

---------------------------------------

library(flowCore)
library(cytutils)

GREEDY AOF:

base_fcs_data <- flowCore::read.FCS("170203_IOF_1_1_singlets.fcs")
manual_labeling_filepath <- "LabelCellsByManualGatingTest.manual_labeling.csv"
samples_filepath <- "LabelCellsByManualGatingTest.csv"
data_dir <- "~/himc/cytutils-test-files/test6"
fcs_data <- flowCore::read.FCS("170203_IOF_1_1_singlets.fcs")

single_sample_labels <- generatePopulationAssignments(
              manual_labeling_filepath, 
              samples_filepath, 
              data_dir)

channel_names <- c("Er168Di", "Nd142Di", "Gd158Di", "Dy161Di")
cell_assignments <- read.csv("cell_assignments_singlets.csv")
index_label_pairs <- cell_assignments[c("Index", "NodLabel")]
expected_num_rows <- nrow(base_fcs_data@exprs)


# We find the indices that were not labeled and add them to our "Label" column 
with a label of NA
unlabeled_indices <- setdiff(1:expected_num_rows, index_label_pairs$Index)
na_assignments <- rep(NA, length(unlabeled_indices))
unlabeled_assignments <- data.frame(unlabeled_indices, na_assignments)
colnames(unlabeled_assignments) <- c("Index", "NodLabel")


index_label_pairs_complete <- rbind(index_label_pairs, unlabeled_assignments)
index_label_pairs_ordered <- index_label_pairs_complete[order(index_label_pairs_complete$Index),]
cell_assignments_ordered <- as.vector(index_label_pairs_ordered$NodLabel)

greedyCytometryAof(base_fcs_data@exprs, cell_assignments_ordered, channel_names)
Converting cluster assignments to indices vectors
	Er168Di
	Nd142Di
	Gd158Di
	Dy161Di
  ChannelName        Aof
1     Er168Di 0.45942729
2     Nd142Di 0.09528135
3     Gd158Di 0.32359932
4     Dy161Di 0.73802856

-----
CALCULATE AOF

x <- base_fcs_data@exprs[, "Er168Di"]
y <- single_sample_labels["iof_1"]
t_cell_indices <- grep(TRUE, y$iof_1$t_cell)
non_t_cell_indices <- grep(FALSE, y$iof_1$t_cell)
calculateAof(x, t_cell_indices, non_t_cell_indices) # =>  0.5021151

-----

CALCULATE AOF MULTIPLE CHANNELS

base_fcs_data_filepath <- "170203_IOF_1_1_singlets.fcs"
channel_population_relationships_filepath <- "channel_population_relationships.csv"
sample_id <- "iof_1"

calculateMultiChannelAof(channel_population_relationships_filepath, base_fcs_data_filepath, single_sample_labels, sample_id)
  Channel Name Aof
1      Er168Di 0.5


----------

AOF PLOT VISUALIZATION
library(ggplot2)

iof_1_t_cells <- y$iof_1$t_cell
er168_col <- base_fcs_data@exprs[,"Er168Di"]

# Tcells
iof_1_t_cells_pos_indices <- which(iof_1_t_cells %in% TRUE)
iof_1_t_cells_neg_indices <- which(iof_1_t_cells %in% FALSE)


er168_exprs_values <- c()
t_cell_status <- c()


for (i in 1:length(er168_col)) {
	print(paste("i:", i))
	er168_exprs_values <- c(er168_exprs_values, er168_col[i])
	if (i %in% iof_1_t_cells_pos_indices) {
		t_cell_status <- c(t_cell_status, "t_cell")
	} else {
		t_cell_status <- c(t_cell_status, "non_t_cell")
	}
}


t_cell_df <- data.frame(er168_exprs_values, t_cell_status)


ggplot(t_cell_df, aes(t_cell_df$er168_exprs_values, fill = t_cell_status)) + geom_density(alpha = 0.2)

# Log helps us remove distortion caused by zeros seen above
ggplot(t_cell_df, aes(t_cell_df$er168_exprs_values, fill = t_cell_status)) + geom_density(alpha = 0.2) + scale_x_log10()

---------------------

iof_1_b_cells <- y$iof_1$b_cell
iof_1_b_cells_pos_indices <- which(iof_1_b_cells %in% TRUE)
iof_1_b_cells_neg_indices <- which(iof_1_b_cells %in% FALSE)

er168_exprs_values <- c()
b_cell_status <- c()



for (i in 1:length(er168_col)) {
	print(paste("i:", i))
	er168_exprs_values <- c(er168_exprs_values, er168_col[i])
	if (i %in% iof_1_b_cells_pos_indices) {
		b_cell_status <- c(b_cell_status, "b_cell")
	} else {
		b_cell_status <- c(b_cell_status, "non_b_cell")
	}
}


b_cell_df <- data.frame(er168_exprs_values, b_cell_status)


ggplot(b_cell_df, aes(b_cell_df$er168_exprs_values, fill = b_cell_status)) + geom_density(alpha = 0.2)

# Log helps us remove distortion caused by zeros seen above
ggplot(b_cell_df, aes(b_cell_df$er168_exprs_values, fill = b_cell_status)) + geom_density(alpha = 0.2) + scale_x_log10()

-----------------------------

B CELL AOF CALCULATIONS


CALCULATE AOF

b_cell_indices <- grep(TRUE, y$iof_1$b_cell)
non_b_cell_indices <- grep(FALSE, y$iof_1$b_cell)
calculateAof(x, b_cell_indices, non_b_cell_indices) # => 

Error in calculateAof(x, b_cell_indices, non_b_cell_indices) : 
  positive population mean is lower than negative population mean

